import telebot
from telebot import types

BOT_TOKEN = 'AAEiZlTdU4GRGIKW39aD6_dEGD6nS2jowiY'
ADMIN_ID = 358551156
CHANNEL_USERNAME = '@INFICOTG'
CHANNEL_LINK = 'https://t.me/INFICOTG'

bot = telebot.TeleBot(BOT_TOKEN)

users = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

@bot.message_handler(commands=['start'])
def start(message):
    main_menu(message)

def main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btn1 = types.KeyboardButton('üìÑ Apply for ICO')
    btn2 = types.KeyboardButton('üèÜ Partner Ranking')
    btn3 = types.KeyboardButton('‚Ñπ About / Tokenomics / FAQ')
    btn4 = types.KeyboardButton('üõí Digital Store')
    btn5 = types.KeyboardButton('üéÅ Get Tokens')
    btn6 = types.KeyboardButton('üìÅ Partner Content')
    btn7 = types.KeyboardButton('üåü Influencer Development Fund')
    btn8 = types.KeyboardButton('üíº Advertising / Collaboration')
    btn9 = types.KeyboardButton('üìä Personal Cabinet')
    btn10 = types.KeyboardButton('üí∞ Donations')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10)
    bot.send_message(message.chat.id, "INFICO - ‚Ññ1 EXCLUSIVELY INFLUENCERS ICO\nMade with LOVE for INFLUENCERS, SUBSCRIBERS and ADVERTISERS\n–î–æ—Å—Ç—É–ø–Ω–æ WORLDWIDE\n–°—á–µ—Ç—á–∏–∫ —Ä–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (1,000 –∏–∑ 150,000,000,000) –∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö 13%\n–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å X, TikTok, Instagram, OnlyFans, Twitch, Facebook, Pinterest, Medium, VK, WeChat.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìÑ Apply for ICO')
def apply_for_ico(message):
    step_1(message)

def step_1(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Subscribe to @INFICOTG', url=CHANNEL_LINK)
    btn2 = types.InlineKeyboardButton('Check Subscription', callback_data='check_subscription')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–®–∞–≥ 1 –∏–∑ 6\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @INFICOTG, –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è ICO!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'check_subscription')
def check_subscription(call):
    user_id = call.from_user.id
    if check_user_subscription(user_id, CHANNEL_USERNAME):
        bot.send_animation(call.message.chat.id, 'URL_TO_CONGRATULATORY_ANIMATION')
        step_2(call.message)
    else:
        bot.send_animation(call.message.chat.id, 'URL_TO_SAD_ANIMATION')
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ @INFICOTG, –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.")
        step_1(call.message)

def check_user_subscription(user_id, channel_username):
    user_status = bot.get_chat_member(channel_username, user_id).status
    return user_status in ['member', 'administrator', 'creator']

def step_2(message):
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('Connect your TON Wallet', callback_data='connect_wallet')
    markup.add(btn)
    bot.send_message(message.chat.id, "–®–∞–≥ 2 –∏–∑ 6\nConnect your TON Wallet to INFICOBOT.\nIf you don't have a TON Wallet, go to https://t.me/wallet.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'connect_wallet')
def connect_wallet(call):
    # –õ–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TON Wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
    bot.send_animation(call.message.chat.id, 'URL_TO_CONGRATULATORY_ANIMATION')
    step_3(call.message)

def step_3(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    msg = bot.send_message(message.chat.id, "–®–∞–≥ 3 –∏–∑ 6\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_channel_name)

def process_channel_name(message):
    channel_name = message.text
    users[message.chat.id] = {'channel_name': channel_name}  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('‚úÖ I Agree', callback_data='confirm_channel')
    markup.add(btn)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö INFICO", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'confirm_channel')
def confirm_channel(call):
    bot.send_animation(call.message.chat.id, 'URL_TO_CONGRATULATORY_ANIMATION')
    step_4(call.message)

def step_4(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    msg = bot.send_message(message.chat.id, "–®–∞–≥ 4 –∏–∑ 6\n–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_language)

def process_language(message):
    language = message.text
    users[message.chat.id]['language'] = language  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_animation(message.chat.id, 'URL_TO_CONGRATULATORY_ANIMATION')
    step_5(message)

def step_5(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    msg = bot.send_message(message.chat.id, "–®–∞–≥ 5 –∏–∑ 6\n–í–≤–µ–¥–∏—Ç–µ –¥–æ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_content_types)

def process_content_types(message):
    content_types = message.text.split(',')
    users[message.chat.id]['content_types'] = content_types  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º–∞—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_animation(message.chat.id, 'URL_TO_CONGRATULATORY_ANIMATION')
    step_6(message)

def step_6(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    msg = bot.send_message(message.chat.id, "–®–∞–≥ 6 –∏–∑ 6\n–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_social_links)

def process_social_links(message):
    social_links = message.text.split(',')
    users[message.chat.id]['social_links'] = social_links  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü. —Å–µ—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_animation(message.chat.id, 'URL_TO_CONGRATULATORY_ANIMATION')
    send_application_to_admin(message)

def send_application_to_admin(message):
    user_data = users[message.chat.id]
    admin_message = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ ICO:\nID: {message.chat.id}\nUsername: @{message.from_user.username}\nChannel: {user_data['channel_name']}\nLanguage: {user_data['language']}\nContent Types: {', '.join(user_data['content_types'])}\nSocial Links: {', '.join(user_data['social_links'])}"
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–û–¥–æ–±—Ä–∏—Ç—å', callback_data=f'approve_{message.chat.id}')
    btn2 = types.InlineKeyboardButton('–û—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'correct_{message.chat.id}')
    btn3 = types.InlineKeyboardButton('–°–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'message_{message.chat.id}')
    markup.add(btn1, btn2, btn3)
    bot.send_message(ADMIN_ID, admin_message, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_'))
def approve_application(call):
    user_id = int(call.data.split('_')[1])
    bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ICO –æ–¥–æ–±—Ä–µ–Ω–∞!")
    # –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤

@bot.callback_query_handler(func=lambda call: call.data.startswith('correct_'))
def correct_application(call):
    user_id = int(call.data.split('_')[1])
    bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ICO —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    # –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö

@bot.callback_query_handler(func=lambda call: call.data.startswith('message_'))
def message_application(call):
    user_id = int(call.data.split('_')[1])
    bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

if __name__ == '__main__':
    bot.polling(none_stop=True)
